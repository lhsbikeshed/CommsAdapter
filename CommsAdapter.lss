
CommsAdapter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080011c  0080011c  0000107a  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000510  00000000  00000000  00001c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e10  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000090e0  00000000  00000000  00002fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022c5  00000000  00000000  0000c083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000077c9  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007c0  00000000  00000000  00015b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003c3c  00000000  00000000  000162d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004801  00000000  00000000  00019f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000119e  00000000  00000000  0001e711  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000758  00000000  00000000  0001f8af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
   0:	7f c0       	rjmp	.+254    	; 0x100 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
   4:	98 c0       	rjmp	.+304    	; 0x136 <__bad_interrupt>
   6:	00 00       	nop
   8:	96 c0       	rjmp	.+300    	; 0x136 <__bad_interrupt>
   a:	00 00       	nop
   c:	94 c0       	rjmp	.+296    	; 0x136 <__bad_interrupt>
   e:	00 00       	nop
  10:	92 c0       	rjmp	.+292    	; 0x136 <__bad_interrupt>
  12:	00 00       	nop
  14:	90 c0       	rjmp	.+288    	; 0x136 <__bad_interrupt>
  16:	00 00       	nop
  18:	8e c0       	rjmp	.+284    	; 0x136 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8c c0       	rjmp	.+280    	; 0x136 <__bad_interrupt>
  1e:	00 00       	nop
  20:	8a c0       	rjmp	.+276    	; 0x136 <__bad_interrupt>
  22:	00 00       	nop
  24:	88 c0       	rjmp	.+272    	; 0x136 <__bad_interrupt>
  26:	00 00       	nop
  28:	86 c0       	rjmp	.+268    	; 0x136 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9f c3       	rjmp	.+1854   	; 0x76c <__vector_11>
  2e:	00 00       	nop
  30:	46 c4       	rjmp	.+2188   	; 0x8be <__vector_12>
  32:	00 00       	nop
  34:	80 c0       	rjmp	.+256    	; 0x136 <__bad_interrupt>
  36:	00 00       	nop
  38:	7e c0       	rjmp	.+252    	; 0x136 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7c c0       	rjmp	.+248    	; 0x136 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7a c0       	rjmp	.+244    	; 0x136 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__bad_interrupt>
  46:	00 00       	nop
  48:	76 c0       	rjmp	.+236    	; 0x136 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	74 c0       	rjmp	.+232    	; 0x136 <__bad_interrupt>
  4e:	00 00       	nop
  50:	72 c0       	rjmp	.+228    	; 0x136 <__bad_interrupt>
  52:	00 00       	nop
  54:	70 c0       	rjmp	.+224    	; 0x136 <__bad_interrupt>
  56:	00 00       	nop
  58:	6e c0       	rjmp	.+220    	; 0x136 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6c c0       	rjmp	.+216    	; 0x136 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6a c0       	rjmp	.+212    	; 0x136 <__bad_interrupt>
  62:	00 00       	nop
  64:	68 c0       	rjmp	.+208    	; 0x136 <__bad_interrupt>
  66:	00 00       	nop
  68:	66 c0       	rjmp	.+204    	; 0x136 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	64 c0       	rjmp	.+200    	; 0x136 <__bad_interrupt>
  6e:	00 00       	nop
  70:	62 c0       	rjmp	.+196    	; 0x136 <__bad_interrupt>
  72:	00 00       	nop

00000074 <DeviceDescriptor>:
  74:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  84:	dc 01                                               ..

00000086 <ConfigurationDescriptor>:
  86:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  96:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  a6:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  b6:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000c4 <LanguageString>:
  c4:	04 03 09 04                                         ....

000000c8 <ManufacturerString>:
  c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <ProductString>:
  e2:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
  f2:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000100 <__ctors_end>:
 100:	11 24       	eor	r1, r1
 102:	1f be       	out	0x3f, r1	; 63
 104:	cf ef       	ldi	r28, 0xFF	; 255
 106:	d2 e0       	ldi	r29, 0x02	; 2
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61

0000010c <__do_copy_data>:
 10c:	11 e0       	ldi	r17, 0x01	; 1
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	ea ec       	ldi	r30, 0xCA	; 202
 114:	ff e0       	ldi	r31, 0x0F	; 15
 116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x10>
 118:	05 90       	lpm	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	ac 31       	cpi	r26, 0x1C	; 28
 11e:	b1 07       	cpc	r27, r17
 120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0xc>

00000122 <__do_clear_bss>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	ac e1       	ldi	r26, 0x1C	; 28
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
 12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
 12c:	a7 33       	cpi	r26, 0x37	; 55
 12e:	b1 07       	cpc	r27, r17
 130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
 132:	75 d0       	rcall	.+234    	; 0x21e <main>
 134:	48 c7       	rjmp	.+3728   	; 0xfc6 <_exit>

00000136 <__bad_interrupt>:
 136:	64 cf       	rjmp	.-312    	; 0x0 <__vectors>

00000138 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 138:	84 b7       	in	r24, 0x34	; 52
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 13e:	88 e1       	ldi	r24, 0x18	; 24
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	80 93 60 00 	sts	0x0060, r24
 148:	10 92 60 00 	sts	0x0060, r1
 14c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	80 93 61 00 	sts	0x0061, r24
 15a:	90 93 61 00 	sts	0x0061, r25
 15e:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
#endif

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
 160:	f6 d2       	rcall	.+1516   	; 0x74e <USB_Init>

	DDRD |= _BV(CLOCKPIN);
 162:	52 9a       	sbi	0x0a, 2	; 10
	DDRD |= _BV(READPIN);
 164:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= _BV(LEDSTROBE);
 166:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= _BV(LEDDATA);
 168:	56 9a       	sbi	0x0a, 6	; 10
	DDRD &= ~(_BV(DATAPIN));
 16a:	53 98       	cbi	0x0a, 3	; 10
	PORTD &= ~(_BV(DATAPIN));
 16c:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(_BV(CLOCKPIN));
 16e:	5a 98       	cbi	0x0b, 2	; 11

  
}
 170:	08 95       	ret

00000172 <boardStatus>:

uint32_t boardStatus(unsigned long leds){
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	7b 01       	movw	r14, r22
 184:	8c 01       	movw	r16, r24
  unsigned long buttons = 0;
  uint8_t bbit;

  //toggle the read pin
  PORTD |= _BV(READPIN);
 186:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	9c e9       	ldi	r25, 0x9C	; 156
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <boardStatus+0x1a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <boardStatus+0x20>
 192:	00 00       	nop
  _delay_ms(10);
  PORTD &= ~(_BV(READPIN));
 194:	5c 98       	cbi	0x0b, 4	; 11

  PORTD |= _BV(LEDSTROBE);
 196:	5d 9a       	sbi	0x0b, 5	; 11
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0

  
}

uint32_t boardStatus(unsigned long leds){
  unsigned long buttons = 0;
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	a9 01       	movw	r20, r18
    //read the current bit from the keyboard

    //send out corresponding LED update
    PORTD |= _BV(CLOCKPIN); //clock high

    unsigned long mask = 1UL << i;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	a8 2e       	mov	r10, r24
 1a6:	b1 2c       	mov	r11, r1
 1a8:	c1 2c       	mov	r12, r1
 1aa:	d1 2c       	mov	r13, r1

  for (uint32_t i = 0; i < 32 ; i++) {
    //read the current bit from the keyboard

    //send out corresponding LED update
    PORTD |= _BV(CLOCKPIN); //clock high
 1ac:	5a 9a       	sbi	0x0b, 2	; 11
 1ae:	e6 2f       	mov	r30, r22

    unsigned long mask = 1UL << i;
 1b0:	d6 01       	movw	r26, r12
 1b2:	c5 01       	movw	r24, r10
 1b4:	06 2e       	mov	r0, r22
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <boardStatus+0x4e>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	aa 1f       	adc	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	0a 94       	dec	r0
 1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <boardStatus+0x46>
    if (leds & mask)
 1c4:	8e 21       	and	r24, r14
 1c6:	9f 21       	and	r25, r15
 1c8:	a0 23       	and	r26, r16
 1ca:	b1 23       	and	r27, r17
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	a1 05       	cpc	r26, r1
 1d0:	b1 05       	cpc	r27, r1
 1d2:	11 f0       	breq	.+4      	; 0x1d8 <boardStatus+0x66>
      PORTD &= ~(_BV(LEDDATA));
 1d4:	5e 98       	cbi	0x0b, 6	; 11
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <boardStatus+0x68>
    else
      PORTD |= _BV(LEDDATA);
 1d8:	5e 9a       	sbi	0x0b, 6	; 11

    PORTD &= ~(_BV(CLOCKPIN)); //clock LOW
 1da:	5a 98       	cbi	0x0b, 2	; 11

    bbit = PIND & _BV(DATAPIN);
 1dc:	89 b1       	in	r24, 0x09	; 9
 1de:	88 70       	andi	r24, 0x08	; 8
    buttons |= ((unsigned long)bbit << i);
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	a0 e0       	ldi	r26, 0x00	; 0
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <boardStatus+0x7e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	aa 1f       	adc	r26, r26
 1ee:	bb 1f       	adc	r27, r27
 1f0:	ea 95       	dec	r30
 1f2:	d2 f7       	brpl	.-12     	; 0x1e8 <boardStatus+0x76>
 1f4:	28 2b       	or	r18, r24
 1f6:	39 2b       	or	r19, r25
 1f8:	4a 2b       	or	r20, r26
 1fa:	5b 2b       	or	r21, r27
 1fc:	6f 5f       	subi	r22, 0xFF	; 255
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
  _delay_ms(10);
  PORTD &= ~(_BV(READPIN));

  PORTD |= _BV(LEDSTROBE);

  for (uint32_t i = 0; i < 32 ; i++) {
 200:	60 32       	cpi	r22, 0x20	; 32
 202:	71 05       	cpc	r23, r1
 204:	99 f6       	brne	.-90     	; 0x1ac <boardStatus+0x3a>
    bbit = PIND & _BV(DATAPIN);
    buttons |= ((unsigned long)bbit << i);
  }
  //  Serial.println();

  PORTD &= ~(_BV(LEDSTROBE));
 206:	5d 98       	cbi	0x0b, 5	; 11

  return buttons;
}
 208:	b9 01       	movw	r22, r18
 20a:	ca 01       	movw	r24, r20
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	ff 90       	pop	r15
 212:	ef 90       	pop	r14
 214:	df 90       	pop	r13
 216:	cf 90       	pop	r12
 218:	bf 90       	pop	r11
 21a:	af 90       	pop	r10
 21c:	08 95       	ret

0000021e <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 21e:	2f 92       	push	r2
 220:	3f 92       	push	r3
 222:	4f 92       	push	r4
 224:	5f 92       	push	r5
 226:	6f 92       	push	r6
 228:	7f 92       	push	r7
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	df 93       	push	r29
 23e:	cf 93       	push	r28
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	27 97       	sbiw	r28, 0x07	; 7
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
 250:	73 df       	rcall	.-282    	; 0x138 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	6c e1       	ldi	r22, 0x1C	; 28
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	a1 d6       	rcall	.+3394   	; 0xf9e <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 25c:	78 94       	sei
	uint16_t len;
	int16_t rec;
	uint8_t counter = 0;
	uint32_t lastButtonStatus = 0;
	//incoming info for leds, buffer and wait for ,
	uint8_t inBuffer[] = {0,0,0,0,0,0,0};
 25e:	fe 01       	movw	r30, r28
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	87 e0       	ldi	r24, 0x07	; 7
 264:	df 01       	movw	r26, r30
 266:	1d 92       	st	X+, r1
 268:	8a 95       	dec	r24
 26a:	e9 f7       	brne	.-6      	; 0x266 <main+0x48>
	uint8_t bufPtr = 0;
	uint32_t leds = 0UL;
 26c:	ee 24       	eor	r14, r14
 26e:	ff 24       	eor	r15, r15
 270:	87 01       	movw	r16, r14
	int16_t rec;
	uint8_t counter = 0;
	uint32_t lastButtonStatus = 0;
	//incoming info for leds, buffer and wait for ,
	uint8_t inBuffer[] = {0,0,0,0,0,0,0};
	uint8_t bufPtr = 0;
 272:	99 24       	eor	r9, r9
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
	uint16_t len;
	int16_t rec;
	uint8_t counter = 0;
	uint32_t lastButtonStatus = 0;
 274:	44 24       	eor	r4, r4
 276:	55 24       	eor	r5, r5
 278:	32 01       	movw	r6, r4
						((unsigned long)inBuffer[1] << 16) |
						((unsigned long)inBuffer[2] << 8)  |
						((unsigned long)inBuffer[3]);
					bufPtr = 0;
				} else {
					inBuffer[bufPtr] = rec;
 27a:	1f 01       	movw	r2, r30
	uint8_t inBuffer[] = {0,0,0,0,0,0,0};
	uint8_t bufPtr = 0;
	uint32_t leds = 0UL;
	for (;;)
	{
		len = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	2d d6       	rcall	.+3162   	; 0xedc <CDC_Device_BytesReceived>
 282:	6c 01       	movw	r12, r24
		for(counter = 0; counter < len; counter++){
 284:	aa 24       	eor	r10, r10
 286:	3a c0       	rjmp	.+116    	; 0x2fc <main+0xde>
			rec = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	4f d6       	rcall	.+3230   	; 0xf2c <CDC_Device_ReceiveByte>
			if(rec >= 0){
 28e:	97 fd       	sbrc	r25, 7
 290:	34 c0       	rjmp	.+104    	; 0x2fa <main+0xdc>
				if(rec == ','){
 292:	8c 32       	cpi	r24, 0x2C	; 44
 294:	91 05       	cpc	r25, r1
 296:	41 f5       	brne	.+80     	; 0x2e8 <main+0xca>
					//buffer done
					leds =  ((unsigned long)inBuffer[0] << 24) |
 298:	e9 80       	ldd	r14, Y+1	; 0x01
 29a:	ff 24       	eor	r15, r15
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	1e 2d       	mov	r17, r14
 2a2:	00 27       	eor	r16, r16
 2a4:	ff 24       	eor	r15, r15
 2a6:	ee 24       	eor	r14, r14
						((unsigned long)inBuffer[1] << 16) |
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	a0 e0       	ldi	r26, 0x00	; 0
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	dc 01       	movw	r26, r24
 2b2:	99 27       	eor	r25, r25
 2b4:	88 27       	eor	r24, r24
		for(counter = 0; counter < len; counter++){
			rec = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
			if(rec >= 0){
				if(rec == ','){
					//buffer done
					leds =  ((unsigned long)inBuffer[0] << 24) |
 2b6:	e8 2a       	or	r14, r24
 2b8:	f9 2a       	or	r15, r25
 2ba:	0a 2b       	or	r16, r26
 2bc:	1b 2b       	or	r17, r27
						((unsigned long)inBuffer[1] << 16) |
						((unsigned long)inBuffer[2] << 8)  |
						((unsigned long)inBuffer[3]);
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
			rec = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
			if(rec >= 0){
				if(rec == ','){
					//buffer done
					leds =  ((unsigned long)inBuffer[0] << 24) |
						((unsigned long)inBuffer[1] << 16) |
 2c6:	e8 2a       	or	r14, r24
 2c8:	f9 2a       	or	r15, r25
 2ca:	0a 2b       	or	r16, r26
 2cc:	1b 2b       	or	r17, r27
						((unsigned long)inBuffer[2] << 8)  |
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	a0 e0       	ldi	r26, 0x00	; 0
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	ba 2f       	mov	r27, r26
 2d8:	a9 2f       	mov	r26, r25
 2da:	98 2f       	mov	r25, r24
 2dc:	88 27       	eor	r24, r24
		for(counter = 0; counter < len; counter++){
			rec = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
			if(rec >= 0){
				if(rec == ','){
					//buffer done
					leds =  ((unsigned long)inBuffer[0] << 24) |
 2de:	e8 2a       	or	r14, r24
 2e0:	f9 2a       	or	r15, r25
 2e2:	0a 2b       	or	r16, r26
 2e4:	1b 2b       	or	r17, r27
 2e6:	08 c0       	rjmp	.+16     	; 0x2f8 <main+0xda>
						((unsigned long)inBuffer[1] << 16) |
						((unsigned long)inBuffer[2] << 8)  |
						((unsigned long)inBuffer[3]);
					bufPtr = 0;
				} else {
					inBuffer[bufPtr] = rec;
 2e8:	f1 01       	movw	r30, r2
 2ea:	e9 0d       	add	r30, r9
 2ec:	f1 1d       	adc	r31, r1
 2ee:	80 83       	st	Z, r24
					bufPtr ++;
 2f0:	93 94       	inc	r9
					if(bufPtr > 5){
 2f2:	b9 2d       	mov	r27, r9
 2f4:	b6 30       	cpi	r27, 0x06	; 6
 2f6:	08 f0       	brcs	.+2      	; 0x2fa <main+0xdc>
						bufPtr = 0;
 2f8:	99 24       	eor	r9, r9
	uint8_t bufPtr = 0;
	uint32_t leds = 0UL;
	for (;;)
	{
		len = CDC_Device_BytesReceived(&VirtualSerial_CDC_Interface);
		for(counter = 0; counter < len; counter++){
 2fa:	a3 94       	inc	r10
 2fc:	8a 2d       	mov	r24, r10
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	8c 15       	cp	r24, r12
 302:	9d 05       	cpc	r25, r13
 304:	08 f4       	brcc	.+2      	; 0x308 <__stack+0x9>
 306:	c0 cf       	rjmp	.-128    	; 0x288 <main+0x6a>
			}
		}	

		//read shift reg for keystate. Compare to last state.
		//output keys that are different to last read
		uint32_t btn = boardStatus(leds);
 308:	b7 01       	movw	r22, r14
 30a:	c8 01       	movw	r24, r16
 30c:	32 df       	rcall	.-412    	; 0x172 <boardStatus>
 30e:	5b 01       	movw	r10, r22
 310:	6c 01       	movw	r12, r24
		if(btn != lastButtonStatus){
 312:	64 15       	cp	r22, r4
 314:	75 05       	cpc	r23, r5
 316:	86 05       	cpc	r24, r6
 318:	97 05       	cpc	r25, r7
 31a:	e9 f0       	breq	.+58     	; 0x356 <__stack+0x57>
			
			CDC_Device_SendByte(&VirtualSerial_CDC_Interface, btn & 0xFF);
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	6a 2d       	mov	r22, r10
 322:	59 d5       	rcall	.+2738   	; 0xdd6 <CDC_Device_SendByte>
			CDC_Device_SendByte(&VirtualSerial_CDC_Interface, btn>>8 & 0xFF);
 324:	55 27       	eor	r21, r21
 326:	4d 2d       	mov	r20, r13
 328:	3c 2d       	mov	r19, r12
 32a:	2b 2d       	mov	r18, r11
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	62 2f       	mov	r22, r18
 332:	51 d5       	rcall	.+2722   	; 0xdd6 <CDC_Device_SendByte>
			CDC_Device_SendByte(&VirtualSerial_CDC_Interface, btn>>16 & 0xFF);
 334:	96 01       	movw	r18, r12
 336:	44 27       	eor	r20, r20
 338:	55 27       	eor	r21, r21
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	62 2f       	mov	r22, r18
 340:	4a d5       	rcall	.+2708   	; 0xdd6 <CDC_Device_SendByte>
			CDC_Device_SendByte(&VirtualSerial_CDC_Interface, btn>>24 & 0xFF);
 342:	2d 2d       	mov	r18, r13
 344:	33 27       	eor	r19, r19
 346:	44 27       	eor	r20, r20
 348:	55 27       	eor	r21, r21
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	62 2f       	mov	r22, r18
 350:	42 d5       	rcall	.+2692   	; 0xdd6 <CDC_Device_SendByte>
 352:	25 01       	movw	r4, r10
 354:	36 01       	movw	r6, r12
				}
			}
			lastButtonStatus = btn;
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	a8 d5       	rcall	.+2896   	; 0xeac <CDC_Device_USBTask>
		USB_USBTask();
 35c:	4f d4       	rcall	.+2206   	; 0xbfc <USB_USBTask>

	}
 35e:	8e cf       	rjmp	.-228    	; 0x27c <main+0x5e>

00000360 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 360:	08 95       	ret

00000362 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 362:	08 95       	ret

00000364 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	91 e0       	ldi	r25, 0x01	; 1

	//LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
 368:	12 c5       	rjmp	.+2596   	; 0xd8e <CDC_Device_ConfigureEndpoints>

0000036a <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	91 e0       	ldi	r25, 0x01	; 1
}
 36e:	62 c4       	rjmp	.+2244   	; 0xc34 <CDC_Device_ProcessControlRequest>

00000370 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 370:	92 30       	cpi	r25, 0x02	; 2
 372:	29 f0       	breq	.+10     	; 0x37e <CALLBACK_USB_GetDescriptor+0xe>
 374:	93 30       	cpi	r25, 0x03	; 3
 376:	41 f0       	breq	.+16     	; 0x388 <CALLBACK_USB_GetDescriptor+0x18>
 378:	91 30       	cpi	r25, 0x01	; 1
 37a:	e9 f4       	brne	.+58     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x46>
 37c:	17 c0       	rjmp	.+46     	; 0x3ac <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 37e:	2e e3       	ldi	r18, 0x3E	; 62
 380:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 382:	e6 e8       	ldi	r30, 0x86	; 134
 384:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 386:	1b c0       	rjmp	.+54     	; 0x3be <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	41 f0       	breq	.+16     	; 0x39c <CALLBACK_USB_GetDescriptor+0x2c>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	18 f0       	brcs	.+6      	; 0x396 <CALLBACK_USB_GetDescriptor+0x26>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	89 f4       	brne	.+34     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x46>
 394:	06 c0       	rjmp	.+12     	; 0x3a2 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 396:	e4 ec       	ldi	r30, 0xC4	; 196
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 39c:	e8 ec       	ldi	r30, 0xC8	; 200
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3a2:	e2 ee       	ldi	r30, 0xE2	; 226
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	24 91       	lpm	r18, Z+
 3a8:	30 e0       	ldi	r19, 0x00	; 0
					break;
 3aa:	09 c0       	rjmp	.+18     	; 0x3be <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3ac:	22 e1       	ldi	r18, 0x12	; 18
 3ae:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 3b0:	e4 e7       	ldi	r30, 0x74	; 116
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 3ba:	e0 e0       	ldi	r30, 0x00	; 0
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 3be:	da 01       	movw	r26, r20
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	fc 93       	st	X, r31
 3c4:	ee 93       	st	-X, r30
	return Size;
}
 3c6:	c9 01       	movw	r24, r18
 3c8:	08 95       	ret

000003ca <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 3ca:	28 2f       	mov	r18, r24
 3cc:	39 2f       	mov	r19, r25
 3ce:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 3d0:	80 91 35 01 	lds	r24, 0x0135
 3d4:	90 91 36 01 	lds	r25, 0x0136
 3d8:	86 17       	cp	r24, r22
 3da:	97 07       	cpc	r25, r23
 3dc:	18 f4       	brcc	.+6      	; 0x3e4 <Endpoint_Write_Control_Stream_LE+0x1a>
 3de:	bc 01       	movw	r22, r24
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	35 c0       	rjmp	.+106    	; 0x44e <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3e4:	61 15       	cp	r22, r1
 3e6:	71 05       	cpc	r23, r1
 3e8:	d9 f7       	brne	.-10     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3ea:	80 91 e8 00 	lds	r24, 0x00E8
 3ee:	8e 77       	andi	r24, 0x7E	; 126
 3f0:	80 93 e8 00 	sts	0x00E8, r24
 3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3f6:	80 91 2e 01 	lds	r24, 0x012E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3fa:	88 23       	and	r24, r24
 3fc:	f1 f1       	breq	.+124    	; 0x47a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3fe:	85 30       	cpi	r24, 0x05	; 5
 400:	c1 f1       	breq	.+112    	; 0x472 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 402:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 406:	83 fd       	sbrc	r24, 3
 408:	36 c0       	rjmp	.+108    	; 0x476 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 40a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 40e:	82 fd       	sbrc	r24, 2
 410:	2a c0       	rjmp	.+84     	; 0x466 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 412:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 416:	80 ff       	sbrs	r24, 0
 418:	1a c0       	rjmp	.+52     	; 0x44e <Endpoint_Write_Control_Stream_LE+0x84>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 41a:	80 91 f2 00 	lds	r24, 0x00F2
 41e:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 420:	06 c0       	rjmp	.+12     	; 0x42e <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 422:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 424:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 428:	61 50       	subi	r22, 0x01	; 1
 42a:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 42c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 42e:	61 15       	cp	r22, r1
 430:	71 05       	cpc	r23, r1
 432:	19 f0       	breq	.+6      	; 0x43a <Endpoint_Write_Control_Stream_LE+0x70>
 434:	88 30       	cpi	r24, 0x08	; 8
 436:	91 05       	cpc	r25, r1
 438:	a0 f3       	brcs	.-24     	; 0x422 <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	88 30       	cpi	r24, 0x08	; 8
 43e:	91 05       	cpc	r25, r1
 440:	09 f0       	breq	.+2      	; 0x444 <Endpoint_Write_Control_Stream_LE+0x7a>
 442:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 444:	80 91 e8 00 	lds	r24, 0x00E8
 448:	8e 77       	andi	r24, 0x7E	; 126
 44a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 44e:	61 15       	cp	r22, r1
 450:	71 05       	cpc	r23, r1
 452:	89 f6       	brne	.-94     	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0x2c>
 454:	22 23       	and	r18, r18
 456:	79 f6       	brne	.-98     	; 0x3f6 <Endpoint_Write_Control_Stream_LE+0x2c>
 458:	06 c0       	rjmp	.+12     	; 0x466 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 45a:	80 91 2e 01 	lds	r24, 0x012E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 45e:	88 23       	and	r24, r24
 460:	61 f0       	breq	.+24     	; 0x47a <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 462:	85 30       	cpi	r24, 0x05	; 5
 464:	61 f0       	breq	.+24     	; 0x47e <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 466:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 46a:	82 ff       	sbrs	r24, 2
 46c:	f6 cf       	rjmp	.-20     	; 0x45a <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 47e:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 480:	08 95       	ret

00000482 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 482:	e8 2f       	mov	r30, r24
 484:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 486:	80 91 35 01 	lds	r24, 0x0135
 48a:	90 91 36 01 	lds	r25, 0x0136
 48e:	86 17       	cp	r24, r22
 490:	97 07       	cpc	r25, r23
 492:	18 f4       	brcc	.+6      	; 0x49a <Endpoint_Write_Control_PStream_LE+0x18>
 494:	bc 01       	movw	r22, r24
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	37 c0       	rjmp	.+110    	; 0x508 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 49a:	61 15       	cp	r22, r1
 49c:	71 05       	cpc	r23, r1
 49e:	d9 f7       	brne	.-10     	; 0x496 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4a0:	80 91 e8 00 	lds	r24, 0x00E8
 4a4:	8e 77       	andi	r24, 0x7E	; 126
 4a6:	80 93 e8 00 	sts	0x00E8, r24
 4aa:	f5 cf       	rjmp	.-22     	; 0x496 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 4ac:	80 91 2e 01 	lds	r24, 0x012E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 4b0:	88 23       	and	r24, r24
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <Endpoint_Write_Control_PStream_LE+0x34>
 4b4:	3f c0       	rjmp	.+126    	; 0x534 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 4b6:	85 30       	cpi	r24, 0x05	; 5
 4b8:	c9 f1       	breq	.+114    	; 0x52c <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 4ba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 4be:	83 fd       	sbrc	r24, 3
 4c0:	37 c0       	rjmp	.+110    	; 0x530 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4c2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 4c6:	82 fd       	sbrc	r24, 2
 4c8:	2b c0       	rjmp	.+86     	; 0x520 <Endpoint_Write_Control_PStream_LE+0x9e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4ca:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 4ce:	80 ff       	sbrs	r24, 0
 4d0:	1b c0       	rjmp	.+54     	; 0x508 <Endpoint_Write_Control_PStream_LE+0x86>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 4d2:	80 91 f2 00 	lds	r24, 0x00F2
 4d6:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 4da:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4dc:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 4e0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 4e2:	61 50       	subi	r22, 0x01	; 1
 4e4:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 4e6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 4e8:	61 15       	cp	r22, r1
 4ea:	71 05       	cpc	r23, r1
 4ec:	19 f0       	breq	.+6      	; 0x4f4 <Endpoint_Write_Control_PStream_LE+0x72>
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	91 05       	cpc	r25, r1
 4f2:	98 f3       	brcs	.-26     	; 0x4da <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	88 30       	cpi	r24, 0x08	; 8
 4f8:	91 05       	cpc	r25, r1
 4fa:	09 f0       	breq	.+2      	; 0x4fe <Endpoint_Write_Control_PStream_LE+0x7c>
 4fc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4fe:	80 91 e8 00 	lds	r24, 0x00E8
 502:	8e 77       	andi	r24, 0x7E	; 126
 504:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 508:	61 15       	cp	r22, r1
 50a:	71 05       	cpc	r23, r1
 50c:	79 f6       	brne	.-98     	; 0x4ac <Endpoint_Write_Control_PStream_LE+0x2a>
 50e:	22 23       	and	r18, r18
 510:	69 f6       	brne	.-102    	; 0x4ac <Endpoint_Write_Control_PStream_LE+0x2a>
 512:	06 c0       	rjmp	.+12     	; 0x520 <Endpoint_Write_Control_PStream_LE+0x9e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 514:	80 91 2e 01 	lds	r24, 0x012E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 518:	88 23       	and	r24, r24
 51a:	61 f0       	breq	.+24     	; 0x534 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 51c:	85 30       	cpi	r24, 0x05	; 5
 51e:	61 f0       	breq	.+24     	; 0x538 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 520:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 524:	82 ff       	sbrs	r24, 2
 526:	f6 cf       	rjmp	.-20     	; 0x514 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 538:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 53a:	08 95       	ret

0000053c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 53c:	98 2f       	mov	r25, r24
 53e:	2c c0       	rjmp	.+88     	; 0x598 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 540:	29 2f       	mov	r18, r25
 542:	2f 70       	andi	r18, 0x0F	; 15
 544:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 548:	98 17       	cp	r25, r24
 54a:	39 f0       	breq	.+14     	; 0x55a <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 54c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 550:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 554:	50 91 f0 00 	lds	r21, 0x00F0
 558:	03 c0       	rjmp	.+6      	; 0x560 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 55a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 55c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 55e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 560:	21 ff       	sbrs	r18, 1
 562:	19 c0       	rjmp	.+50     	; 0x596 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 564:	30 91 eb 00 	lds	r19, 0x00EB
 568:	3e 7f       	andi	r19, 0xFE	; 254
 56a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 56e:	30 91 ed 00 	lds	r19, 0x00ED
 572:	3d 7f       	andi	r19, 0xFD	; 253
 574:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 578:	30 91 eb 00 	lds	r19, 0x00EB
 57c:	31 60       	ori	r19, 0x01	; 1
 57e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 582:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 586:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 58a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 58e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 592:	27 ff       	sbrs	r18, 7
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 596:	9f 5f       	subi	r25, 0xFF	; 255
 598:	95 30       	cpi	r25, 0x05	; 5
 59a:	90 f2       	brcs	.-92     	; 0x540 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 59c:	8f 70       	andi	r24, 0x0F	; 15
 59e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 5a6:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 5a8:	08 95       	ret

000005aa <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
 5aa:	ef 92       	push	r14
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 5b8:	e8 2e       	mov	r14, r24
 5ba:	e7 01       	movw	r28, r14
 5bc:	7e 01       	movw	r14, r28
 5be:	f9 2e       	mov	r15, r25
 5c0:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 5c2:	00 e0       	ldi	r16, 0x00	; 0
 5c4:	2a c0       	rjmp	.+84     	; 0x61a <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
 5c6:	98 81       	ld	r25, Y
 5c8:	99 23       	and	r25, r25
 5ca:	29 f1       	breq	.+74     	; 0x616 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
 5cc:	6b 81       	ldd	r22, Y+3	; 0x03
 5ce:	e9 81       	ldd	r30, Y+1	; 0x01
 5d0:	fa 81       	ldd	r31, Y+2	; 0x02
 5d2:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 5d4:	89 2f       	mov	r24, r25
 5d6:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 5d8:	85 30       	cpi	r24, 0x05	; 5
 5da:	18 f5       	brcc	.+70     	; 0x622 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
 5dc:	62 95       	swap	r22
 5de:	66 0f       	add	r22, r22
 5e0:	66 0f       	add	r22, r22
 5e2:	60 7c       	andi	r22, 0xC0	; 192
 5e4:	99 1f       	adc	r25, r25
 5e6:	99 27       	eor	r25, r25
 5e8:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 5ea:	69 2b       	or	r22, r25
 5ec:	22 30       	cpi	r18, 0x02	; 2
 5ee:	10 f0       	brcs	.+4      	; 0x5f4 <Endpoint_ConfigureEndpointTable+0x4a>
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <Endpoint_ConfigureEndpointTable+0x4c>
 5f4:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 5f6:	28 e0       	ldi	r18, 0x08	; 8
 5f8:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 5fe:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 600:	22 0f       	add	r18, r18
 602:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 604:	2e 17       	cp	r18, r30
 606:	3f 07       	cpc	r19, r31
 608:	d0 f3       	brcs	.-12     	; 0x5fe <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
 60a:	42 95       	swap	r20
 60c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 60e:	49 2b       	or	r20, r25
 610:	95 df       	rcall	.-214    	; 0x53c <Endpoint_ConfigureEndpoint_Prv>
 612:	88 23       	and	r24, r24
 614:	31 f0       	breq	.+12     	; 0x622 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
 616:	0f 5f       	subi	r16, 0xFF	; 255
 618:	25 96       	adiw	r28, 0x05	; 5
 61a:	01 17       	cp	r16, r17
 61c:	a0 f2       	brcs	.-88     	; 0x5c6 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	01 c0       	rjmp	.+2      	; 0x624 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
 622:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	08 95       	ret

00000632 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 632:	80 91 2f 01 	lds	r24, 0x012F
 636:	87 ff       	sbrs	r24, 7
 638:	13 c0       	rjmp	.+38     	; 0x660 <Endpoint_ClearStatusStage+0x2e>
 63a:	04 c0       	rjmp	.+8      	; 0x644 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 63c:	80 91 2e 01 	lds	r24, 0x012E
 640:	88 23       	and	r24, r24
 642:	b9 f0       	breq	.+46     	; 0x672 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 644:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 648:	82 ff       	sbrs	r24, 2
 64a:	f8 cf       	rjmp	.-16     	; 0x63c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 64c:	80 91 e8 00 	lds	r24, 0x00E8
 650:	8b 77       	andi	r24, 0x7B	; 123
 652:	80 93 e8 00 	sts	0x00E8, r24
 656:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 658:	80 91 2e 01 	lds	r24, 0x012E
 65c:	88 23       	and	r24, r24
 65e:	49 f0       	breq	.+18     	; 0x672 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 660:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 664:	80 ff       	sbrs	r24, 0
 666:	f8 cf       	rjmp	.-16     	; 0x658 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 668:	80 91 e8 00 	lds	r24, 0x00E8
 66c:	8e 77       	andi	r24, 0x7E	; 126
 66e:	80 93 e8 00 	sts	0x00E8, r24
 672:	08 95       	ret

00000674 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 674:	80 91 e4 00 	lds	r24, 0x00E4
 678:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 67c:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 67e:	20 91 ec 00 	lds	r18, 0x00EC
 682:	20 ff       	sbrs	r18, 0
 684:	26 c0       	rjmp	.+76     	; 0x6d2 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 686:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 68a:	20 fd       	sbrc	r18, 0
 68c:	16 c0       	rjmp	.+44     	; 0x6ba <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 68e:	20 91 2e 01 	lds	r18, 0x012E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 692:	22 23       	and	r18, r18
 694:	a1 f0       	breq	.+40     	; 0x6be <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 696:	25 30       	cpi	r18, 0x05	; 5
 698:	a1 f0       	breq	.+40     	; 0x6c2 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 69a:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 69e:	25 fd       	sbrc	r18, 5
 6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <Endpoint_WaitUntilReady+0x52>
 6a2:	20 91 e4 00 	lds	r18, 0x00E4
 6a6:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	39 f3       	breq	.-50     	; 0x67e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 6b0:	44 23       	and	r20, r20
 6b2:	59 f0       	breq	.+22     	; 0x6ca <Endpoint_WaitUntilReady+0x56>
 6b4:	41 50       	subi	r20, 0x01	; 1
 6b6:	c9 01       	movw	r24, r18
 6b8:	e2 cf       	rjmp	.-60     	; 0x67e <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 6be:	82 e0       	ldi	r24, 0x02	; 2
 6c0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 6ca:	84 e0       	ldi	r24, 0x04	; 4
 6cc:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 6ce:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 6d0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6d2:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 6d6:	22 ff       	sbrs	r18, 2
 6d8:	da cf       	rjmp	.-76     	; 0x68e <Endpoint_WaitUntilReady+0x1a>
 6da:	f9 cf       	rjmp	.-14     	; 0x6ce <Endpoint_WaitUntilReady+0x5a>

000006dc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 6dc:	41 d0       	rcall	.+130    	; 0x760 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6de:	43 d0       	rcall	.+134    	; 0x766 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 6e0:	80 91 d8 00 	lds	r24, 0x00D8
 6e4:	8f 77       	andi	r24, 0x7F	; 127
 6e6:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
 6ea:	80 91 d8 00 	lds	r24, 0x00D8
 6ee:	80 68       	ori	r24, 0x80	; 128
 6f0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 6f4:	80 91 d8 00 	lds	r24, 0x00D8
 6f8:	8f 7d       	andi	r24, 0xDF	; 223
 6fa:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 702:	86 e0       	ldi	r24, 0x06	; 6
 704:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 706:	09 b4       	in	r0, 0x29	; 41
 708:	00 fe       	sbrs	r0, 0
 70a:	fd cf       	rjmp	.-6      	; 0x706 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 70c:	10 92 2e 01 	sts	0x012E, r1
	USB_Device_ConfigurationNumber  = 0;
 710:	10 92 2a 01 	sts	0x012A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 714:	10 92 2c 01 	sts	0x012C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 718:	10 92 2b 01 	sts	0x012B, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	42 e0       	ldi	r20, 0x02	; 2
 722:	0c df       	rcall	.-488    	; 0x53c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 724:	80 91 e1 00 	lds	r24, 0x00E1
 728:	8e 7f       	andi	r24, 0xFE	; 254
 72a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 72e:	80 91 e2 00 	lds	r24, 0x00E2
 732:	81 60       	ori	r24, 0x01	; 1
 734:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 738:	80 91 e2 00 	lds	r24, 0x00E2
 73c:	88 60       	ori	r24, 0x08	; 8
 73e:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 742:	80 91 e0 00 	lds	r24, 0x00E0
 746:	8e 7f       	andi	r24, 0xFE	; 254
 748:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 74c:	08 95       	ret

0000074e <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 74e:	e3 e6       	ldi	r30, 0x63	; 99
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	8e 7f       	andi	r24, 0xFE	; 254
 756:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	80 93 2d 01 	sts	0x012D, r24

	USB_ResetInterface();
}
 75e:	be cf       	rjmp	.-132    	; 0x6dc <USB_ResetInterface>

00000760 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 760:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 764:	08 95       	ret

00000766 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 766:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 76a:	08 95       	ret

0000076c <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	2f 93       	push	r18
 778:	3f 93       	push	r19
 77a:	4f 93       	push	r20
 77c:	5f 93       	push	r21
 77e:	6f 93       	push	r22
 780:	7f 93       	push	r23
 782:	8f 93       	push	r24
 784:	9f 93       	push	r25
 786:	af 93       	push	r26
 788:	bf 93       	push	r27
 78a:	ef 93       	push	r30
 78c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 78e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 792:	82 ff       	sbrs	r24, 2
 794:	0a c0       	rjmp	.+20     	; 0x7aa <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 796:	80 91 e2 00 	lds	r24, 0x00E2
 79a:	82 ff       	sbrs	r24, 2
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 79e:	80 91 e1 00 	lds	r24, 0x00E1
 7a2:	8b 7f       	andi	r24, 0xFB	; 251
 7a4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 7a8:	28 d2       	rcall	.+1104   	; 0xbfa <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7aa:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7ae:	80 ff       	sbrs	r24, 0
 7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7b2:	80 91 e2 00 	lds	r24, 0x00E2
 7b6:	80 ff       	sbrs	r24, 0
 7b8:	13 c0       	rjmp	.+38     	; 0x7e0 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7ba:	80 91 e2 00 	lds	r24, 0x00E2
 7be:	8e 7f       	andi	r24, 0xFE	; 254
 7c0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7c4:	80 91 e2 00 	lds	r24, 0x00E2
 7c8:	80 61       	ori	r24, 0x10	; 16
 7ca:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 7ce:	80 91 d8 00 	lds	r24, 0x00D8
 7d2:	80 62       	ori	r24, 0x20	; 32
 7d4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7d8:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 7da:	10 92 2e 01 	sts	0x012E, r1
		EVENT_USB_Device_Disconnect();
 7de:	c1 dd       	rcall	.-1150   	; 0x362 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 7e0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 7e4:	84 ff       	sbrs	r24, 4
 7e6:	2f c0       	rjmp	.+94     	; 0x846 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 7e8:	80 91 e2 00 	lds	r24, 0x00E2
 7ec:	84 ff       	sbrs	r24, 4
 7ee:	2b c0       	rjmp	.+86     	; 0x846 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7f0:	84 e0       	ldi	r24, 0x04	; 4
 7f2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7f8:	09 b4       	in	r0, 0x29	; 41
 7fa:	00 fe       	sbrs	r0, 0
 7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 7fe:	80 91 d8 00 	lds	r24, 0x00D8
 802:	8f 7d       	andi	r24, 0xDF	; 223
 804:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 808:	80 91 e1 00 	lds	r24, 0x00E1
 80c:	8f 7e       	andi	r24, 0xEF	; 239
 80e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 812:	80 91 e2 00 	lds	r24, 0x00E2
 816:	8f 7e       	andi	r24, 0xEF	; 239
 818:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 81c:	80 91 e2 00 	lds	r24, 0x00E2
 820:	81 60       	ori	r24, 0x01	; 1
 822:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 826:	80 91 2a 01 	lds	r24, 0x012A
 82a:	88 23       	and	r24, r24
 82c:	11 f0       	breq	.+4      	; 0x832 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 82e:	84 e0       	ldi	r24, 0x04	; 4
 830:	07 c0       	rjmp	.+14     	; 0x840 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 832:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 836:	87 ff       	sbrs	r24, 7
 838:	02 c0       	rjmp	.+4      	; 0x83e <__vector_11+0xd2>
 83a:	83 e0       	ldi	r24, 0x03	; 3
 83c:	01 c0       	rjmp	.+2      	; 0x840 <__vector_11+0xd4>
 83e:	81 e0       	ldi	r24, 0x01	; 1
 840:	80 93 2e 01 	sts	0x012E, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 844:	8d dd       	rcall	.-1254   	; 0x360 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 846:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 84a:	83 ff       	sbrs	r24, 3
 84c:	27 c0       	rjmp	.+78     	; 0x89c <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 84e:	80 91 e2 00 	lds	r24, 0x00E2
 852:	83 ff       	sbrs	r24, 3
 854:	23 c0       	rjmp	.+70     	; 0x89c <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 856:	80 91 e1 00 	lds	r24, 0x00E1
 85a:	87 7f       	andi	r24, 0xF7	; 247
 85c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	80 93 2e 01 	sts	0x012E, r24
		USB_Device_ConfigurationNumber = 0;
 866:	10 92 2a 01 	sts	0x012A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 86a:	80 91 e1 00 	lds	r24, 0x00E1
 86e:	8e 7f       	andi	r24, 0xFE	; 254
 870:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 874:	80 91 e2 00 	lds	r24, 0x00E2
 878:	8e 7f       	andi	r24, 0xFE	; 254
 87a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 87e:	80 91 e2 00 	lds	r24, 0x00E2
 882:	80 61       	ori	r24, 0x10	; 16
 884:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	42 e0       	ldi	r20, 0x02	; 2
 88e:	56 de       	rcall	.-852    	; 0x53c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 890:	80 91 f0 00 	lds	r24, 0x00F0
 894:	88 60       	ori	r24, 0x08	; 8
 896:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 89a:	af d1       	rcall	.+862    	; 0xbfa <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 89c:	ff 91       	pop	r31
 89e:	ef 91       	pop	r30
 8a0:	bf 91       	pop	r27
 8a2:	af 91       	pop	r26
 8a4:	9f 91       	pop	r25
 8a6:	8f 91       	pop	r24
 8a8:	7f 91       	pop	r23
 8aa:	6f 91       	pop	r22
 8ac:	5f 91       	pop	r21
 8ae:	4f 91       	pop	r20
 8b0:	3f 91       	pop	r19
 8b2:	2f 91       	pop	r18
 8b4:	0f 90       	pop	r0
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	0f 90       	pop	r0
 8ba:	1f 90       	pop	r1
 8bc:	18 95       	reti

000008be <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 8be:	1f 92       	push	r1
 8c0:	0f 92       	push	r0
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	0f 92       	push	r0
 8c6:	11 24       	eor	r1, r1
 8c8:	1f 93       	push	r17
 8ca:	2f 93       	push	r18
 8cc:	3f 93       	push	r19
 8ce:	4f 93       	push	r20
 8d0:	5f 93       	push	r21
 8d2:	6f 93       	push	r22
 8d4:	7f 93       	push	r23
 8d6:	8f 93       	push	r24
 8d8:	9f 93       	push	r25
 8da:	af 93       	push	r26
 8dc:	bf 93       	push	r27
 8de:	ef 93       	push	r30
 8e0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 8e2:	10 91 e9 00 	lds	r17, 0x00E9
 8e6:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8e8:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 8ec:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 8f0:	80 91 f0 00 	lds	r24, 0x00F0
 8f4:	87 7f       	andi	r24, 0xF7	; 247
 8f6:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 8fa:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 8fc:	1b d0       	rcall	.+54     	; 0x934 <USB_Device_ProcessControlRequest>
 8fe:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 902:	80 91 f0 00 	lds	r24, 0x00F0
 906:	88 60       	ori	r24, 0x08	; 8
 908:	80 93 f0 00 	sts	0x00F0, r24
 90c:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	1f 91       	pop	r17
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 934:	1f 93       	push	r17
 936:	df 93       	push	r29
 938:	cf 93       	push	r28
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
 93e:	ac 97       	sbiw	r28, 0x2c	; 44
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	de bf       	out	0x3e, r29	; 62
 946:	0f be       	out	0x3f, r0	; 63
 948:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 94a:	ef e2       	ldi	r30, 0x2F	; 47
 94c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 94e:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 952:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 954:	21 e0       	ldi	r18, 0x01	; 1
 956:	e7 33       	cpi	r30, 0x37	; 55
 958:	f2 07       	cpc	r31, r18
 95a:	c9 f7       	brne	.-14     	; 0x94e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 95c:	06 dd       	rcall	.-1524   	; 0x36a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 95e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 962:	83 ff       	sbrs	r24, 3
 964:	32 c1       	rjmp	.+612    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 966:	80 91 2f 01 	lds	r24, 0x012F

		switch (USB_ControlRequest.bRequest)
 96a:	20 91 30 01 	lds	r18, 0x0130
 96e:	25 30       	cpi	r18, 0x05	; 5
 970:	09 f4       	brne	.+2      	; 0x974 <USB_Device_ProcessControlRequest+0x40>
 972:	84 c0       	rjmp	.+264    	; 0xa7c <USB_Device_ProcessControlRequest+0x148>
 974:	26 30       	cpi	r18, 0x06	; 6
 976:	40 f4       	brcc	.+16     	; 0x988 <USB_Device_ProcessControlRequest+0x54>
 978:	21 30       	cpi	r18, 0x01	; 1
 97a:	a1 f1       	breq	.+104    	; 0x9e4 <USB_Device_ProcessControlRequest+0xb0>
 97c:	21 30       	cpi	r18, 0x01	; 1
 97e:	70 f0       	brcs	.+28     	; 0x99c <USB_Device_ProcessControlRequest+0x68>
 980:	23 30       	cpi	r18, 0x03	; 3
 982:	09 f0       	breq	.+2      	; 0x986 <USB_Device_ProcessControlRequest+0x52>
 984:	22 c1       	rjmp	.+580    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
 986:	2e c0       	rjmp	.+92     	; 0x9e4 <USB_Device_ProcessControlRequest+0xb0>
 988:	28 30       	cpi	r18, 0x08	; 8
 98a:	09 f4       	brne	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x5a>
 98c:	f0 c0       	rjmp	.+480    	; 0xb6e <USB_Device_ProcessControlRequest+0x23a>
 98e:	29 30       	cpi	r18, 0x09	; 9
 990:	09 f4       	brne	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0x60>
 992:	ff c0       	rjmp	.+510    	; 0xb92 <USB_Device_ProcessControlRequest+0x25e>
 994:	26 30       	cpi	r18, 0x06	; 6
 996:	09 f0       	breq	.+2      	; 0x99a <USB_Device_ProcessControlRequest+0x66>
 998:	18 c1       	rjmp	.+560    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
 99a:	93 c0       	rjmp	.+294    	; 0xac2 <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 99c:	80 38       	cpi	r24, 0x80	; 128
 99e:	21 f0       	breq	.+8      	; 0x9a8 <USB_Device_ProcessControlRequest+0x74>
 9a0:	82 38       	cpi	r24, 0x82	; 130
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <USB_Device_ProcessControlRequest+0x72>
 9a4:	12 c1       	rjmp	.+548    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 9a8:	80 91 2b 01 	lds	r24, 0x012B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9ac:	90 91 2c 01 	lds	r25, 0x012C
 9b0:	99 23       	and	r25, r25
 9b2:	71 f0       	breq	.+28     	; 0x9d0 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9b4:	82 60       	ori	r24, 0x02	; 2
 9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9b8:	80 91 33 01 	lds	r24, 0x0133
 9bc:	8f 70       	andi	r24, 0x0F	; 15
 9be:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9c2:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	95 ff       	sbrs	r25, 5
 9ca:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9cc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d0:	90 91 e8 00 	lds	r25, 0x00E8
 9d4:	97 7f       	andi	r25, 0xF7	; 247
 9d6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9da:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 9de:	10 92 f1 00 	sts	0x00F1, r1
 9e2:	d0 c0       	rjmp	.+416    	; 0xb84 <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9e4:	88 23       	and	r24, r24
 9e6:	19 f0       	breq	.+6      	; 0x9ee <USB_Device_ProcessControlRequest+0xba>
 9e8:	82 30       	cpi	r24, 0x02	; 2
 9ea:	09 f0       	breq	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0xba>
 9ec:	ee c0       	rjmp	.+476    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	8f 71       	andi	r24, 0x1F	; 31
 9f2:	90 70       	andi	r25, 0x00	; 0
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	29 f0       	breq	.+10     	; 0xa02 <USB_Device_ProcessControlRequest+0xce>
 9f8:	82 30       	cpi	r24, 0x02	; 2
 9fa:	91 05       	cpc	r25, r1
 9fc:	09 f0       	breq	.+2      	; 0xa00 <USB_Device_ProcessControlRequest+0xcc>
 9fe:	e5 c0       	rjmp	.+458    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
 a00:	0b c0       	rjmp	.+22     	; 0xa18 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a02:	80 91 31 01 	lds	r24, 0x0131
 a06:	81 30       	cpi	r24, 0x01	; 1
 a08:	09 f0       	breq	.+2      	; 0xa0c <USB_Device_ProcessControlRequest+0xd8>
 a0a:	df c0       	rjmp	.+446    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a0c:	23 30       	cpi	r18, 0x03	; 3
 a0e:	09 f0       	breq	.+2      	; 0xa12 <USB_Device_ProcessControlRequest+0xde>
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	80 93 2c 01 	sts	0x012C, r24
 a16:	2c c0       	rjmp	.+88     	; 0xa70 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a18:	80 91 31 01 	lds	r24, 0x0131
 a1c:	88 23       	and	r24, r24
 a1e:	41 f5       	brne	.+80     	; 0xa70 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a20:	20 91 33 01 	lds	r18, 0x0133
 a24:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a26:	09 f4       	brne	.+2      	; 0xa2a <USB_Device_ProcessControlRequest+0xf6>
 a28:	d0 c0       	rjmp	.+416    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a2a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a2e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a32:	80 ff       	sbrs	r24, 0
 a34:	1d c0       	rjmp	.+58     	; 0xa70 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a36:	80 91 30 01 	lds	r24, 0x0130
 a3a:	83 30       	cpi	r24, 0x03	; 3
 a3c:	21 f4       	brne	.+8      	; 0xa46 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a3e:	80 91 eb 00 	lds	r24, 0x00EB
 a42:	80 62       	ori	r24, 0x20	; 32
 a44:	13 c0       	rjmp	.+38     	; 0xa6c <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a46:	80 91 eb 00 	lds	r24, 0x00EB
 a4a:	80 61       	ori	r24, 0x10	; 16
 a4c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <USB_Device_ProcessControlRequest+0x126>
 a56:	88 0f       	add	r24, r24
 a58:	99 1f       	adc	r25, r25
 a5a:	2a 95       	dec	r18
 a5c:	e2 f7       	brpl	.-8      	; 0xa56 <USB_Device_ProcessControlRequest+0x122>
 a5e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a62:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a66:	80 91 eb 00 	lds	r24, 0x00EB
 a6a:	88 60       	ori	r24, 0x08	; 8
 a6c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a70:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a74:	80 91 e8 00 	lds	r24, 0x00E8
 a78:	87 7f       	andi	r24, 0xF7	; 247
 a7a:	87 c0       	rjmp	.+270    	; 0xb8a <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a7c:	88 23       	and	r24, r24
 a7e:	09 f0       	breq	.+2      	; 0xa82 <USB_Device_ProcessControlRequest+0x14e>
 a80:	a4 c0       	rjmp	.+328    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a82:	10 91 31 01 	lds	r17, 0x0131
 a86:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a88:	80 91 e3 00 	lds	r24, 0x00E3
 a8c:	80 78       	andi	r24, 0x80	; 128
 a8e:	81 2b       	or	r24, r17
 a90:	80 93 e3 00 	sts	0x00E3, r24
 a94:	80 91 e8 00 	lds	r24, 0x00E8
 a98:	87 7f       	andi	r24, 0xF7	; 247
 a9a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 a9e:	c9 dd       	rcall	.-1134   	; 0x632 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 aa0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 aa4:	80 ff       	sbrs	r24, 0
 aa6:	fc cf       	rjmp	.-8      	; 0xaa0 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
 aa8:	80 91 e3 00 	lds	r24, 0x00E3
 aac:	80 68       	ori	r24, 0x80	; 128
 aae:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ab2:	11 23       	and	r17, r17
 ab4:	11 f0       	breq	.+4      	; 0xaba <USB_Device_ProcessControlRequest+0x186>
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0x188>
 aba:	82 e0       	ldi	r24, 0x02	; 2
 abc:	80 93 2e 01 	sts	0x012E, r24
 ac0:	84 c0       	rjmp	.+264    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ac2:	80 58       	subi	r24, 0x80	; 128
 ac4:	82 30       	cpi	r24, 0x02	; 2
 ac6:	08 f0       	brcs	.+2      	; 0xaca <USB_Device_ProcessControlRequest+0x196>
 ac8:	80 c0       	rjmp	.+256    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aca:	80 91 31 01 	lds	r24, 0x0131
 ace:	90 91 32 01 	lds	r25, 0x0132
 ad2:	23 e0       	ldi	r18, 0x03	; 3
 ad4:	8c 3d       	cpi	r24, 0xDC	; 220
 ad6:	92 07       	cpc	r25, r18
 ad8:	91 f5       	brne	.+100    	; 0xb3e <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ada:	83 e0       	ldi	r24, 0x03	; 3
 adc:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 ade:	8a e2       	ldi	r24, 0x2A	; 42
 ae0:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 ae2:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 ae4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 ae6:	de 01       	movw	r26, r28
 ae8:	15 96       	adiw	r26, 0x05	; 5
 aea:	80 e0       	ldi	r24, 0x00	; 0
 aec:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 aee:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 af0:	61 e2       	ldi	r22, 0x21	; 33
 af2:	e4 2f       	mov	r30, r20
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	60 93 57 00 	sts	0x0057, r22
 afa:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
 afc:	80 ff       	sbrs	r24, 0
 afe:	03 c0       	rjmp	.+6      	; 0xb06 <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
 b00:	e2 95       	swap	r30
 b02:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b04:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b06:	ef 70       	andi	r30, 0x0F	; 15
 b08:	2e 2f       	mov	r18, r30
 b0a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b0c:	ea 30       	cpi	r30, 0x0A	; 10
 b0e:	18 f0       	brcs	.+6      	; 0xb16 <USB_Device_ProcessControlRequest+0x1e2>
 b10:	29 5c       	subi	r18, 0xC9	; 201
 b12:	3f 4f       	sbci	r19, 0xFF	; 255
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <USB_Device_ProcessControlRequest+0x1e6>
 b16:	20 5d       	subi	r18, 0xD0	; 208
 b18:	3f 4f       	sbci	r19, 0xFF	; 255
 b1a:	2d 93       	st	X+, r18
 b1c:	3d 93       	st	X+, r19
 b1e:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b20:	84 31       	cpi	r24, 0x14	; 20
 b22:	91 05       	cpc	r25, r1
 b24:	31 f7       	brne	.-52     	; 0xaf2 <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b26:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b28:	80 91 e8 00 	lds	r24, 0x00E8
 b2c:	87 7f       	andi	r24, 0xF7	; 247
 b2e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b32:	ce 01       	movw	r24, r28
 b34:	03 96       	adiw	r24, 0x03	; 3
 b36:	6a e2       	ldi	r22, 0x2A	; 42
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	47 dc       	rcall	.-1906   	; 0x3ca <Endpoint_Write_Control_Stream_LE>
 b3c:	12 c0       	rjmp	.+36     	; 0xb62 <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b3e:	60 91 33 01 	lds	r22, 0x0133
 b42:	ae 01       	movw	r20, r28
 b44:	4f 5f       	subi	r20, 0xFF	; 255
 b46:	5f 4f       	sbci	r21, 0xFF	; 255
 b48:	13 dc       	rcall	.-2010   	; 0x370 <CALLBACK_USB_GetDescriptor>
 b4a:	bc 01       	movw	r22, r24
 b4c:	00 97       	sbiw	r24, 0x00	; 0
 b4e:	09 f4       	brne	.+2      	; 0xb52 <USB_Device_ProcessControlRequest+0x21e>
 b50:	3c c0       	rjmp	.+120    	; 0xbca <USB_Device_ProcessControlRequest+0x296>
 b52:	80 91 e8 00 	lds	r24, 0x00E8
 b56:	87 7f       	andi	r24, 0xF7	; 247
 b58:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b5c:	89 81       	ldd	r24, Y+1	; 0x01
 b5e:	9a 81       	ldd	r25, Y+2	; 0x02
 b60:	90 dc       	rcall	.-1760   	; 0x482 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b62:	80 91 e8 00 	lds	r24, 0x00E8
 b66:	8b 77       	andi	r24, 0x7B	; 123
 b68:	80 93 e8 00 	sts	0x00E8, r24
 b6c:	2e c0       	rjmp	.+92     	; 0xbca <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b6e:	80 38       	cpi	r24, 0x80	; 128
 b70:	61 f5       	brne	.+88     	; 0xbca <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b72:	80 91 e8 00 	lds	r24, 0x00E8
 b76:	87 7f       	andi	r24, 0xF7	; 247
 b78:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b7c:	80 91 2a 01 	lds	r24, 0x012A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b80:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b84:	80 91 e8 00 	lds	r24, 0x00E8
 b88:	8e 77       	andi	r24, 0x7E	; 126
 b8a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 b8e:	51 dd       	rcall	.-1374   	; 0x632 <Endpoint_ClearStatusStage>
 b90:	1c c0       	rjmp	.+56     	; 0xbca <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b92:	88 23       	and	r24, r24
 b94:	d1 f4       	brne	.+52     	; 0xbca <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b96:	90 91 31 01 	lds	r25, 0x0131
 b9a:	92 30       	cpi	r25, 0x02	; 2
 b9c:	b0 f4       	brcc	.+44     	; 0xbca <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b9e:	80 91 e8 00 	lds	r24, 0x00E8
 ba2:	87 7f       	andi	r24, 0xF7	; 247
 ba4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ba8:	90 93 2a 01 	sts	0x012A, r25

	Endpoint_ClearStatusStage();
 bac:	42 dd       	rcall	.-1404   	; 0x632 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bae:	80 91 2a 01 	lds	r24, 0x012A
 bb2:	88 23       	and	r24, r24
 bb4:	21 f4       	brne	.+8      	; 0xbbe <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bb6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bba:	87 ff       	sbrs	r24, 7
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <USB_Device_ProcessControlRequest+0x28e>
 bbe:	84 e0       	ldi	r24, 0x04	; 4
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <USB_Device_ProcessControlRequest+0x290>
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	80 93 2e 01 	sts	0x012E, r24

	EVENT_USB_Device_ConfigurationChanged();
 bc8:	cd db       	rcall	.-2150   	; 0x364 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bca:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bce:	83 ff       	sbrs	r24, 3
 bd0:	0a c0       	rjmp	.+20     	; 0xbe6 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bd2:	80 91 e8 00 	lds	r24, 0x00E8
 bd6:	87 7f       	andi	r24, 0xF7	; 247
 bd8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bdc:	80 91 eb 00 	lds	r24, 0x00EB
 be0:	80 62       	ori	r24, 0x20	; 32
 be2:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 be6:	ac 96       	adiw	r28, 0x2c	; 44
 be8:	0f b6       	in	r0, 0x3f	; 63
 bea:	f8 94       	cli
 bec:	de bf       	out	0x3e, r29	; 62
 bee:	0f be       	out	0x3f, r0	; 63
 bf0:	cd bf       	out	0x3d, r28	; 61
 bf2:	cf 91       	pop	r28
 bf4:	df 91       	pop	r29
 bf6:	1f 91       	pop	r17
 bf8:	08 95       	ret

00000bfa <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 bfa:	08 95       	ret

00000bfc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 bfc:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 bfe:	80 91 2e 01 	lds	r24, 0x012E
 c02:	88 23       	and	r24, r24
 c04:	a9 f0       	breq	.+42     	; 0xc30 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c06:	80 91 e9 00 	lds	r24, 0x00E9
 c0a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c0c:	90 91 ec 00 	lds	r25, 0x00EC
 c10:	90 ff       	sbrs	r25, 0
 c12:	02 c0       	rjmp	.+4      	; 0xc18 <USB_USBTask+0x1c>
 c14:	10 e8       	ldi	r17, 0x80	; 128
 c16:	01 c0       	rjmp	.+2      	; 0xc1a <USB_USBTask+0x1e>
 c18:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c1a:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c1c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c20:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 c24:	83 ff       	sbrs	r24, 3
 c26:	01 c0       	rjmp	.+2      	; 0xc2a <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 c28:	85 de       	rcall	.-758    	; 0x934 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c2a:	1f 70       	andi	r17, 0x0F	; 15
 c2c:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 c30:	1f 91       	pop	r17
 c32:	08 95       	ret

00000c34 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c3a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 c3e:	83 ff       	sbrs	r24, 3
 c40:	a3 c0       	rjmp	.+326    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 c42:	88 81       	ld	r24, Y
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	20 91 33 01 	lds	r18, 0x0133
 c4a:	30 91 34 01 	lds	r19, 0x0134
 c4e:	28 17       	cp	r18, r24
 c50:	39 07       	cpc	r19, r25
 c52:	09 f0       	breq	.+2      	; 0xc56 <CDC_Device_ProcessControlRequest+0x22>
 c54:	99 c0       	rjmp	.+306    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
	  return;

	switch (USB_ControlRequest.bRequest)
 c56:	80 91 30 01 	lds	r24, 0x0130
 c5a:	81 32       	cpi	r24, 0x21	; 33
 c5c:	69 f0       	breq	.+26     	; 0xc78 <CDC_Device_ProcessControlRequest+0x44>
 c5e:	82 32       	cpi	r24, 0x22	; 34
 c60:	20 f4       	brcc	.+8      	; 0xc6a <CDC_Device_ProcessControlRequest+0x36>
 c62:	80 32       	cpi	r24, 0x20	; 32
 c64:	09 f0       	breq	.+2      	; 0xc68 <CDC_Device_ProcessControlRequest+0x34>
 c66:	90 c0       	rjmp	.+288    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
 c68:	3c c0       	rjmp	.+120    	; 0xce2 <CDC_Device_ProcessControlRequest+0xae>
 c6a:	82 32       	cpi	r24, 0x22	; 34
 c6c:	09 f4       	brne	.+2      	; 0xc70 <CDC_Device_ProcessControlRequest+0x3c>
 c6e:	6b c0       	rjmp	.+214    	; 0xd46 <CDC_Device_ProcessControlRequest+0x112>
 c70:	83 32       	cpi	r24, 0x23	; 35
 c72:	09 f0       	breq	.+2      	; 0xc76 <CDC_Device_ProcessControlRequest+0x42>
 c74:	89 c0       	rjmp	.+274    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
 c76:	7a c0       	rjmp	.+244    	; 0xd6c <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c78:	80 91 2f 01 	lds	r24, 0x012F
 c7c:	81 3a       	cpi	r24, 0xA1	; 161
 c7e:	09 f0       	breq	.+2      	; 0xc82 <CDC_Device_ProcessControlRequest+0x4e>
 c80:	83 c0       	rjmp	.+262    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c82:	80 91 e8 00 	lds	r24, 0x00E8
 c86:	87 7f       	andi	r24, 0xF7	; 247
 c88:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c8c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 c90:	80 ff       	sbrs	r24, 0
 c92:	fc cf       	rjmp	.-8      	; 0xc8c <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 c94:	8c 89       	ldd	r24, Y+20	; 0x14
 c96:	9d 89       	ldd	r25, Y+21	; 0x15
 c98:	ae 89       	ldd	r26, Y+22	; 0x16
 c9a:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 c9c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 ca0:	29 2f       	mov	r18, r25
 ca2:	3a 2f       	mov	r19, r26
 ca4:	4b 2f       	mov	r20, r27
 ca6:	55 27       	eor	r21, r21
 ca8:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
 cac:	9d 01       	movw	r18, r26
 cae:	44 27       	eor	r20, r20
 cb0:	55 27       	eor	r21, r21
 cb2:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
 cb6:	8b 2f       	mov	r24, r27
 cb8:	99 27       	eor	r25, r25
 cba:	aa 27       	eor	r26, r26
 cbc:	bb 27       	eor	r27, r27
 cbe:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 cc2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 cc4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 cc8:	89 8d       	ldd	r24, Y+25	; 0x19
 cca:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 cce:	8a 8d       	ldd	r24, Y+26	; 0x1a
 cd0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cd4:	80 91 e8 00 	lds	r24, 0x00E8
 cd8:	8e 77       	andi	r24, 0x7E	; 126
 cda:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 cde:	a9 dc       	rcall	.-1710   	; 0x632 <Endpoint_ClearStatusStage>
 ce0:	53 c0       	rjmp	.+166    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ce2:	80 91 2f 01 	lds	r24, 0x012F
 ce6:	81 32       	cpi	r24, 0x21	; 33
 ce8:	09 f0       	breq	.+2      	; 0xcec <CDC_Device_ProcessControlRequest+0xb8>
 cea:	4e c0       	rjmp	.+156    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cec:	80 91 e8 00 	lds	r24, 0x00E8
 cf0:	87 7f       	andi	r24, 0xF7	; 247
 cf2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <CDC_Device_ProcessControlRequest+0xce>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 cf8:	80 91 2e 01 	lds	r24, 0x012E
 cfc:	88 23       	and	r24, r24
 cfe:	09 f4       	brne	.+2      	; 0xd02 <CDC_Device_ProcessControlRequest+0xce>
 d00:	43 c0       	rjmp	.+134    	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 d02:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 d06:	82 ff       	sbrs	r24, 2
 d08:	f7 cf       	rjmp	.-18     	; 0xcf8 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 d0a:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
 d0e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
 d12:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
 d16:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 d1a:	3c 8b       	std	Y+20, r19	; 0x14
 d1c:	2d 8b       	std	Y+21, r18	; 0x15
 d1e:	9e 8b       	std	Y+22, r25	; 0x16
 d20:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 d22:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 d26:	88 8f       	std	Y+24, r24	; 0x18
 d28:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 d2c:	89 8f       	std	Y+25, r24	; 0x19
 d2e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 d32:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d34:	80 91 e8 00 	lds	r24, 0x00E8
 d38:	8b 77       	andi	r24, 0x7B	; 123
 d3a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 d3e:	79 dc       	rcall	.-1806   	; 0x632 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 d40:	ce 01       	movw	r24, r28
 d42:	40 d1       	rcall	.+640    	; 0xfc4 <CDC_Device_Event_Stub>
 d44:	21 c0       	rjmp	.+66     	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d46:	80 91 2f 01 	lds	r24, 0x012F
 d4a:	81 32       	cpi	r24, 0x21	; 33
 d4c:	e9 f4       	brne	.+58     	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4e:	80 91 e8 00 	lds	r24, 0x00E8
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d58:	6c dc       	rcall	.-1832   	; 0x632 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 d5a:	80 91 31 01 	lds	r24, 0x0131
 d5e:	90 91 32 01 	lds	r25, 0x0132
 d62:	99 8b       	std	Y+17, r25	; 0x11
 d64:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 d66:	ce 01       	movw	r24, r28
 d68:	2d d1       	rcall	.+602    	; 0xfc4 <CDC_Device_Event_Stub>
 d6a:	0e c0       	rjmp	.+28     	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d6c:	80 91 2f 01 	lds	r24, 0x012F
 d70:	81 32       	cpi	r24, 0x21	; 33
 d72:	51 f4       	brne	.+20     	; 0xd88 <CDC_Device_ProcessControlRequest+0x154>
 d74:	80 91 e8 00 	lds	r24, 0x00E8
 d78:	87 7f       	andi	r24, 0xF7	; 247
 d7a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 d7e:	59 dc       	rcall	.-1870   	; 0x632 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 d80:	ce 01       	movw	r24, r28
 d82:	60 91 31 01 	lds	r22, 0x0131
 d86:	1e d1       	rcall	.+572    	; 0xfc4 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 d88:	df 91       	pop	r29
 d8a:	cf 91       	pop	r28
 d8c:	08 95       	ret

00000d8e <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d8e:	cf 93       	push	r28
 d90:	df 93       	push	r29
 d92:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 d94:	40 96       	adiw	r24, 0x10	; 16
 d96:	fc 01       	movw	r30, r24
 d98:	8b e0       	ldi	r24, 0x0B	; 11
 d9a:	df 01       	movw	r26, r30
 d9c:	1d 92       	st	X+, r1
 d9e:	8a 95       	dec	r24
 da0:	e9 f7       	brne	.-6      	; 0xd9c <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 da2:	82 e0       	ldi	r24, 0x02	; 2
 da4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 da6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 da8:	83 e0       	ldi	r24, 0x03	; 3
 daa:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 dac:	ce 01       	movw	r24, r28
 dae:	01 96       	adiw	r24, 0x01	; 1
 db0:	61 e0       	ldi	r22, 0x01	; 1
 db2:	fb db       	rcall	.-2058   	; 0x5aa <Endpoint_ConfigureEndpointTable>
 db4:	88 23       	and	r24, r24
 db6:	59 f0       	breq	.+22     	; 0xdce <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 db8:	ce 01       	movw	r24, r28
 dba:	06 96       	adiw	r24, 0x06	; 6
 dbc:	61 e0       	ldi	r22, 0x01	; 1
 dbe:	f5 db       	rcall	.-2070   	; 0x5aa <Endpoint_ConfigureEndpointTable>
 dc0:	88 23       	and	r24, r24
 dc2:	29 f0       	breq	.+10     	; 0xdce <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 dc4:	ce 01       	movw	r24, r28
 dc6:	0b 96       	adiw	r24, 0x0b	; 11
 dc8:	61 e0       	ldi	r22, 0x01	; 1
 dca:	ef db       	rcall	.-2082   	; 0x5aa <Endpoint_ConfigureEndpointTable>
 dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
 dce:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
 dd0:	df 91       	pop	r29
 dd2:	cf 91       	pop	r28
 dd4:	08 95       	ret

00000dd6 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 dd6:	df 93       	push	r29
 dd8:	cf 93       	push	r28
 dda:	0f 92       	push	r0
 ddc:	cd b7       	in	r28, 0x3d	; 61
 dde:	de b7       	in	r29, 0x3e	; 62
 de0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 de2:	80 91 2e 01 	lds	r24, 0x012E
 de6:	84 30       	cpi	r24, 0x04	; 4
 de8:	f9 f4       	brne	.+62     	; 0xe28 <CDC_Device_SendByte+0x52>
 dea:	24 89       	ldd	r18, Z+20	; 0x14
 dec:	35 89       	ldd	r19, Z+21	; 0x15
 dee:	46 89       	ldd	r20, Z+22	; 0x16
 df0:	57 89       	ldd	r21, Z+23	; 0x17
 df2:	21 15       	cp	r18, r1
 df4:	31 05       	cpc	r19, r1
 df6:	41 05       	cpc	r20, r1
 df8:	51 05       	cpc	r21, r1
 dfa:	b1 f0       	breq	.+44     	; 0xe28 <CDC_Device_SendByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dfc:	81 81       	ldd	r24, Z+1	; 0x01
 dfe:	8f 70       	andi	r24, 0x0F	; 15
 e00:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e04:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
 e08:	85 fd       	sbrc	r24, 5
 e0a:	0a c0       	rjmp	.+20     	; 0xe20 <CDC_Device_SendByte+0x4a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e0c:	80 91 e8 00 	lds	r24, 0x00E8
 e10:	8e 77       	andi	r24, 0x7E	; 126
 e12:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e16:	69 83       	std	Y+1, r22	; 0x01
 e18:	2d dc       	rcall	.-1958   	; 0x674 <Endpoint_WaitUntilReady>
 e1a:	69 81       	ldd	r22, Y+1	; 0x01
 e1c:	88 23       	and	r24, r24
 e1e:	29 f4       	brne	.+10     	; 0xe2a <CDC_Device_SendByte+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e20:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 e24:	80 e0       	ldi	r24, 0x00	; 0
 e26:	01 c0       	rjmp	.+2      	; 0xe2a <CDC_Device_SendByte+0x54>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 e28:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
 e2a:	0f 90       	pop	r0
 e2c:	cf 91       	pop	r28
 e2e:	df 91       	pop	r29
 e30:	08 95       	ret

00000e32 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 e32:	28 2f       	mov	r18, r24
 e34:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 e36:	84 85       	ldd	r24, Z+12	; 0x0c
 e38:	95 85       	ldd	r25, Z+13	; 0x0d
 e3a:	62 2f       	mov	r22, r18
 e3c:	cc df       	rcall	.-104    	; 0xdd6 <CDC_Device_SendByte>
 e3e:	88 23       	and	r24, r24
 e40:	19 f0       	breq	.+6      	; 0xe48 <CDC_Device_putchar+0x16>
 e42:	2f ef       	ldi	r18, 0xFF	; 255
 e44:	3f ef       	ldi	r19, 0xFF	; 255
 e46:	02 c0       	rjmp	.+4      	; 0xe4c <CDC_Device_putchar+0x1a>
 e48:	20 e0       	ldi	r18, 0x00	; 0
 e4a:	30 e0       	ldi	r19, 0x00	; 0
}
 e4c:	c9 01       	movw	r24, r18
 e4e:	08 95       	ret

00000e50 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e50:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 e52:	80 91 2e 01 	lds	r24, 0x012E
 e56:	84 30       	cpi	r24, 0x04	; 4
 e58:	19 f5       	brne	.+70     	; 0xea0 <CDC_Device_Flush+0x50>
 e5a:	24 89       	ldd	r18, Z+20	; 0x14
 e5c:	35 89       	ldd	r19, Z+21	; 0x15
 e5e:	46 89       	ldd	r20, Z+22	; 0x16
 e60:	57 89       	ldd	r21, Z+23	; 0x17
 e62:	21 15       	cp	r18, r1
 e64:	31 05       	cpc	r19, r1
 e66:	41 05       	cpc	r20, r1
 e68:	51 05       	cpc	r21, r1
 e6a:	d1 f0       	breq	.+52     	; 0xea0 <CDC_Device_Flush+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e6c:	81 81       	ldd	r24, Z+1	; 0x01
 e6e:	8f 70       	andi	r24, 0x0F	; 15
 e70:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 e74:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
 e78:	88 23       	and	r24, r24
 e7a:	a1 f0       	breq	.+40     	; 0xea4 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 e7c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e80:	80 91 e8 00 	lds	r24, 0x00E8
 e84:	8e 77       	andi	r24, 0x7E	; 126
 e86:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 e8a:	95 fd       	sbrc	r25, 5
 e8c:	0d c0       	rjmp	.+26     	; 0xea8 <CDC_Device_Flush+0x58>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 e8e:	f2 db       	rcall	.-2076   	; 0x674 <Endpoint_WaitUntilReady>
 e90:	88 23       	and	r24, r24
 e92:	59 f4       	brne	.+22     	; 0xeaa <CDC_Device_Flush+0x5a>
 e94:	90 91 e8 00 	lds	r25, 0x00E8
 e98:	9e 77       	andi	r25, 0x7E	; 126
 e9a:	90 93 e8 00 	sts	0x00E8, r25
 e9e:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
 ea0:	82 e0       	ldi	r24, 0x02	; 2
 ea2:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
 ea4:	80 e0       	ldi	r24, 0x00	; 0
 ea6:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
 ea8:	80 e0       	ldi	r24, 0x00	; 0
}
 eaa:	08 95       	ret

00000eac <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 eac:	20 91 2e 01 	lds	r18, 0x012E
 eb0:	24 30       	cpi	r18, 0x04	; 4
 eb2:	99 f4       	brne	.+38     	; 0xeda <CDC_Device_USBTask+0x2e>
 eb4:	fc 01       	movw	r30, r24
 eb6:	24 89       	ldd	r18, Z+20	; 0x14
 eb8:	35 89       	ldd	r19, Z+21	; 0x15
 eba:	46 89       	ldd	r20, Z+22	; 0x16
 ebc:	57 89       	ldd	r21, Z+23	; 0x17
 ebe:	21 15       	cp	r18, r1
 ec0:	31 05       	cpc	r19, r1
 ec2:	41 05       	cpc	r20, r1
 ec4:	51 05       	cpc	r21, r1
 ec6:	49 f0       	breq	.+18     	; 0xeda <CDC_Device_USBTask+0x2e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ec8:	21 81       	ldd	r18, Z+1	; 0x01
 eca:	2f 70       	andi	r18, 0x0F	; 15
 ecc:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ed0:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
 ed4:	20 ff       	sbrs	r18, 0
 ed6:	01 c0       	rjmp	.+2      	; 0xeda <CDC_Device_USBTask+0x2e>
	  CDC_Device_Flush(CDCInterfaceInfo);
 ed8:	bb cf       	rjmp	.-138    	; 0xe50 <CDC_Device_Flush>
 eda:	08 95       	ret

00000edc <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 edc:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ede:	80 91 2e 01 	lds	r24, 0x012E
 ee2:	84 30       	cpi	r24, 0x04	; 4
 ee4:	f9 f4       	brne	.+62     	; 0xf24 <CDC_Device_BytesReceived+0x48>
 ee6:	24 89       	ldd	r18, Z+20	; 0x14
 ee8:	35 89       	ldd	r19, Z+21	; 0x15
 eea:	46 89       	ldd	r20, Z+22	; 0x16
 eec:	57 89       	ldd	r21, Z+23	; 0x17
 eee:	21 15       	cp	r18, r1
 ef0:	31 05       	cpc	r19, r1
 ef2:	41 05       	cpc	r20, r1
 ef4:	51 05       	cpc	r21, r1
 ef6:	b1 f0       	breq	.+44     	; 0xf24 <CDC_Device_BytesReceived+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ef8:	86 81       	ldd	r24, Z+6	; 0x06
 efa:	8f 70       	andi	r24, 0x0F	; 15
 efc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 f00:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 f04:	82 ff       	sbrs	r24, 2
 f06:	0e c0       	rjmp	.+28     	; 0xf24 <CDC_Device_BytesReceived+0x48>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 f08:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
 f0c:	88 23       	and	r24, r24
 f0e:	31 f4       	brne	.+12     	; 0xf1c <CDC_Device_BytesReceived+0x40>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f10:	80 91 e8 00 	lds	r24, 0x00E8
 f14:	8b 77       	andi	r24, 0x7B	; 123
 f16:	80 93 e8 00 	sts	0x00E8, r24
 f1a:	04 c0       	rjmp	.+8      	; 0xf24 <CDC_Device_BytesReceived+0x48>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 f1c:	20 91 f2 00 	lds	r18, 0x00F2
 f20:	30 e0       	ldi	r19, 0x00	; 0
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
 f22:	02 c0       	rjmp	.+4      	; 0xf28 <CDC_Device_BytesReceived+0x4c>
		}
	}
	else
	{
		return 0;
 f24:	20 e0       	ldi	r18, 0x00	; 0
 f26:	30 e0       	ldi	r19, 0x00	; 0
	}
}
 f28:	c9 01       	movw	r24, r18
 f2a:	08 95       	ret

00000f2c <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 f2c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 f2e:	80 91 2e 01 	lds	r24, 0x012E
 f32:	84 30       	cpi	r24, 0x04	; 4
 f34:	29 f5       	brne	.+74     	; 0xf80 <CDC_Device_ReceiveByte+0x54>
 f36:	24 89       	ldd	r18, Z+20	; 0x14
 f38:	35 89       	ldd	r19, Z+21	; 0x15
 f3a:	46 89       	ldd	r20, Z+22	; 0x16
 f3c:	57 89       	ldd	r21, Z+23	; 0x17
 f3e:	21 15       	cp	r18, r1
 f40:	31 05       	cpc	r19, r1
 f42:	41 05       	cpc	r20, r1
 f44:	51 05       	cpc	r21, r1
 f46:	e1 f0       	breq	.+56     	; 0xf80 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f48:	86 81       	ldd	r24, Z+6	; 0x06
 f4a:	8f 70       	andi	r24, 0x0F	; 15
 f4c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 f50:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
 f54:	82 ff       	sbrs	r24, 2
 f56:	14 c0       	rjmp	.+40     	; 0xf80 <CDC_Device_ReceiveByte+0x54>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 f58:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
 f5c:	88 23       	and	r24, r24
 f5e:	21 f0       	breq	.+8      	; 0xf68 <CDC_Device_ReceiveByte+0x3c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 f60:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 f64:	30 e0       	ldi	r19, 0x00	; 0
 f66:	02 c0       	rjmp	.+4      	; 0xf6c <CDC_Device_ReceiveByte+0x40>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 f68:	2f ef       	ldi	r18, 0xFF	; 255
 f6a:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 f6c:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
 f70:	88 23       	and	r24, r24
 f72:	41 f4       	brne	.+16     	; 0xf84 <CDC_Device_ReceiveByte+0x58>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f74:	80 91 e8 00 	lds	r24, 0x00E8
 f78:	8b 77       	andi	r24, 0x7B	; 123
 f7a:	80 93 e8 00 	sts	0x00E8, r24
 f7e:	02 c0       	rjmp	.+4      	; 0xf84 <CDC_Device_ReceiveByte+0x58>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
 f80:	2f ef       	ldi	r18, 0xFF	; 255
 f82:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 f84:	c9 01       	movw	r24, r18
 f86:	08 95       	ret

00000f88 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 f88:	fc 01       	movw	r30, r24
 f8a:	84 85       	ldd	r24, Z+12	; 0x0c
 f8c:	95 85       	ldd	r25, Z+13	; 0x0d
 f8e:	ce df       	rcall	.-100    	; 0xf2c <CDC_Device_ReceiveByte>
 f90:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
 f92:	97 ff       	sbrs	r25, 7
 f94:	02 c0       	rjmp	.+4      	; 0xf9a <CDC_Device_getchar+0x12>
	  return _FDEV_EOF;
 f96:	2e ef       	ldi	r18, 0xFE	; 254
 f98:	3f ef       	ldi	r19, 0xFF	; 255

	return ReceivedByte;
}
 f9a:	c9 01       	movw	r24, r18
 f9c:	08 95       	ret

00000f9e <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
 f9e:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
 fa0:	2e e0       	ldi	r18, 0x0E	; 14
 fa2:	db 01       	movw	r26, r22
 fa4:	1d 92       	st	X+, r1
 fa6:	2a 95       	dec	r18
 fa8:	e9 f7       	brne	.-6      	; 0xfa4 <CDC_Device_CreateStream+0x6>
 faa:	23 e0       	ldi	r18, 0x03	; 3
 fac:	23 83       	std	Z+3, r18	; 0x03
 fae:	29 e1       	ldi	r18, 0x19	; 25
 fb0:	37 e0       	ldi	r19, 0x07	; 7
 fb2:	31 87       	std	Z+9, r19	; 0x09
 fb4:	20 87       	std	Z+8, r18	; 0x08
 fb6:	24 ec       	ldi	r18, 0xC4	; 196
 fb8:	37 e0       	ldi	r19, 0x07	; 7
 fba:	33 87       	std	Z+11, r19	; 0x0b
 fbc:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 fbe:	95 87       	std	Z+13, r25	; 0x0d
 fc0:	84 87       	std	Z+12, r24	; 0x0c
}
 fc2:	08 95       	ret

00000fc4 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 fc4:	08 95       	ret

00000fc6 <_exit>:
 fc6:	f8 94       	cli

00000fc8 <__stop_program>:
 fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <__stop_program>
